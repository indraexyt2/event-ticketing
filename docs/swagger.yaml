basePath: /api
definitions:
  dto.BuyTicketRequest:
    properties:
      event_id:
        type: string
      purchase_date:
        type: string
    required:
    - event_id
    type: object
  dto.CreateEventReqDto:
    properties:
      capacity:
        minimum: 1
        type: integer
      description:
        type: string
      end_date:
        type: string
      location:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      start_date:
        type: string
      status:
        enum:
        - active
        - ongoing
        - completed
        type: string
    required:
    - capacity
    - end_date
    - location
    - name
    - price
    - start_date
    - status
    type: object
  dto.UpdateEventReqDto:
    properties:
      capacity:
        minimum: 1
        type: integer
      description:
        type: string
      end_date:
        type: string
      location:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      start_date:
        type: string
      status:
        enum:
        - active
        - ongoing
        - completed
        type: string
    required:
    - capacity
    - end_date
    - location
    - name
    - price
    - start_date
    - status
    type: object
  dto.UserRequestDto:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  entity.Role:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - AdminRole
    - UserRole
  entity.User:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      role:
        $ref: '#/definitions/entity.Role'
    required:
    - email
    - name
    - password
    type: object
  utils.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: indra@dev.com
    name: Indrawansyah
  description: REST API for EventTicketing
  title: EventTicketing API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: User registration info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Login user
      tags:
      - auth
  /auth/profile:
    get:
      consumes:
      - application/json
      description: Get the profile of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided information
      parameters:
      - description: User registration info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Register a new user
      tags:
      - auth
  /events:
    get:
      consumes:
      - application/json
      description: Get all events with pagination and optional filtering
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: string
      - description: 'Results per page (default: 10)'
        in: query
        name: limit
        type: string
      - description: Search keyword
        in: query
        name: keyword
        type: string
      - description: Event status (active/ongoing/completed)
        in: query
        name: status
        type: string
      - description: Start date filter (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date filter (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get all events with pagination and filtering
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Create a new event with the provided information
      parameters:
      - description: Event creation info
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/dto.CreateEventReqDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new event
      tags:
      - events
  /events/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an event by its ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete an event
      tags:
      - events
    get:
      consumes:
      - application/json
      description: Get an event by its ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get an event by ID
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Update an event with the provided information
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated event info
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateEventReqDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Update an event
      tags:
      - events
  /events/{id}/tickets:
    get:
      consumes:
      - application/json
      description: Get all tickets for a specific event (admin only)
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: string
      - description: 'Results per page (default: 10)'
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all tickets for an event
      tags:
      - tickets
  /reports/events/{id}:
    get:
      consumes:
      - application/json
      description: Get a detailed report for a specific event (admin only)
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Get report for a specific event
      tags:
      - reports
  /reports/summary:
    get:
      consumes:
      - application/json
      description: Get a summary report of the entire ticketing system (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Get system summary report
      tags:
      - reports
  /tickets:
    post:
      consumes:
      - application/json
      description: Purchase a ticket for a specific event
      parameters:
      - description: Ticket purchase info
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/dto.BuyTicketRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Buy a ticket for an event
      tags:
      - tickets
  /tickets/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a specific ticket
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a ticket by ID
      tags:
      - tickets
  /tickets/{id}/cancel:
    put:
      consumes:
      - application/json
      description: Cancel a purchased ticket
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Cancel a ticket
      tags:
      - tickets
  /tickets/my-tickets:
    get:
      consumes:
      - application/json
      description: Get all tickets purchased by the current authenticated user
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: string
      - description: 'Results per page (default: 10)'
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all tickets for current user
      tags:
      - tickets
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
